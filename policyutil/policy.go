// Copyright 2023 Canonical Ltd.
// Licensed under the LGPLv3 with static-linking exception.
// See LICENCE file for details.

package policyutil

import (
	"bytes"
	"crypto"
	"errors"
	"fmt"
	"hash/fnv"
	"io"
	"strings"
	"unicode/utf8"

	"github.com/canonical/go-tpm2"
	"github.com/canonical/go-tpm2/internal/union"
	"github.com/canonical/go-tpm2/mu"
)

var (
	// ErrMissingDigest is returned from [Policy.Execute] when a TPM2_PolicyCpHash or
	// TPM2_PolicyNameHash assertion is missing a digest for the selected session algorithm.
	ErrMissingDigest = errors.New("missing digest for session algorithm")
)

type (
	taskFn       func() error
	authMapKey   uint32
	ticketMapKey uint32
)

func mapKey(vals ...interface{}) uint32 {
	h := fnv.New32()
	mu.MustMarshalToWriter(h, vals...)
	return h.Sum32()
}

func makeAuthMapKey(authName tpm2.Name, policyRef tpm2.Nonce) authMapKey {
	return authMapKey(mapKey(authName, policyRef))
}

func makeTicketMapKey(ticket *PolicyTicket) ticketMapKey {
	return ticketMapKey(mapKey(ticket.AuthName, ticket.PolicyRef, ticket.CpHash))
}

// PolicyTicket corresponds to a ticket generated from a TPM2_PolicySigned or TPM2_PolicySecret
// assertion and is returned by [Policy.Execute]. Generated tickets can be supplied to
// [Policy.Execute] in the future in order to satisfy these assertions as long as they haven't
// expired.
type PolicyTicket struct {
	AuthName  tpm2.Name    // The name of the auth object associated with the corresponding assertion
	PolicyRef tpm2.Nonce   // The policy ref of the corresponding assertion
	CpHash    tpm2.Digest  // The cpHash supplied to the assertion that generated this ticket
	Timeout   tpm2.Timeout // The timeout returned by the assertion that generated this ticket

	// Ticket is the actual ticket returned by the TPM for the assertion that generated this ticket.
	// The Tag field indicates whether this was generated by TPM2_PolicySigned or TPM2_PolicySecret.
	Ticket *tpm2.TkAuth
}

// PolicyError is returned from [Policy.Execute] and other methods when an error
// is encountered during some processing of a policy. It provides an indication of
// where an error occurred.
type PolicyError struct {
	Path string // the path of the branch at which the error occurred

	task string
	err  error
}

type policyDelimiterError interface {
	error
	isPolicyDelimiterError()
}

// makePolicyError returns a PolicyError in the following way:
//   - If the supplied error already contains a PolicyError from the current policy,
//     it is unwrapped to the first error within the current policy and returned.
//   - If the supplied error does not contain a PolicyError from the current policy
//     the error is wrapped with a new PolicyError.
//
// A policy boundary is indicated by the presence of a policyDelimiterError.
func makePolicyError(err error, path policyBranchPath, task string) *PolicyError {
	pErr := &PolicyError{Path: string(path), task: task, err: err}

	var delim policyDelimiterError
	errors.As(err, &delim)

	var pErrNext *PolicyError
	for errors.As(errors.Unwrap(pErr), &pErrNext) {
		if delim != nil {
			var delim2 policyDelimiterError
			if !errors.As(pErrNext, &delim2) || delim2 != delim {
				break
			}
		}
		pErr = pErrNext
	}

	return pErr
}

func (e *PolicyError) Error() string {
	branch := "root branch"
	if len(e.Path) > 0 {
		branch = "branch " + e.Path
	}
	return fmt.Sprintf("cannot run '%s' task in %s: %v", e.task, branch, e.err)
}

func (e *PolicyError) Unwrap() error {
	return e.err
}

// PolicyNVError is returned from [Policy.Execute] and other methods when an error
// is encountered when executing a TPM2_PolicyNV assertion. If there was an error
// authorizing use of the NV index with a policy session, this will wrap a
// *[ResourceAuthorizeError].
type PolicyNVError struct {
	Index tpm2.Handle // The NV index handle
	Name  tpm2.Name   // The NV index name

	err error
}

func (e *PolicyNVError) Error() string {
	return fmt.Sprintf("cannot complete assertion with NV index %v (name: %#x): %v", e.Index, e.Name, e.err)
}

func (e *PolicyNVError) Unwrap() error {
	return e.err
}

// PolicyAuthorizationError is returned from [Policy.Execute] if:
//   - the policy uses TPM2_PolicySecret and the associated resource could not be authorized. When
//     this occurs because there was an error loading the associated resource, this will wrap a
//     *[nesourceLoadError]. If there was an error authorizing use of the resource with a policy
//     session, this will wrap a *[ResourceAuthorizeError].
//   - the policy uses TPM2_PolicySigned and no or an invalid signed authorization was supplied.
//   - the policy uses TPM2_PolicyAuthorize and no or an invalid authorized policy was supplied.
type PolicyAuthorizationError struct {
	AuthName  tpm2.Name
	PolicyRef tpm2.Nonce
	err       error
}

func (e *PolicyAuthorizationError) Error() string {
	return fmt.Sprintf("cannot complete authorization with authName=%#x, policyRef=%#x: %v", e.AuthName, e.PolicyRef, e.err)
}

func (e *PolicyAuthorizationError) Unwrap() error {
	return e.err
}

// ResourceLoadError is returned from [Policy.Execute] if the policy uses TPM2_PolicySecret
// and the associated resource could not be loaded. If loading the resource required
// authorization with a policy session and that failed, this will wrap another *[PolicyError].
type ResourceLoadError struct {
	Name tpm2.Name
	err  error
}

func (e *ResourceLoadError) Error() string {
	return fmt.Sprintf("cannot load resource with name %#x: %v", e.Name, e.err)
}

func (e *ResourceLoadError) Unwrap() error {
	return e.err
}

func (*ResourceLoadError) isPolicyDelimiterError() {}

// ResourceAuthorizeError is returned from [Policy.Execute] if an error is encountered
// when trying to authorize a resource required by a policy. This should be wrappped in
// either a *[PolicyNVError] or *[PolicyAuthorizationError] which indicates the assertion
// that the error occurred for. This may wrap another *[PolicySession].
type ResourceAuthorizeError struct {
	Name tpm2.Name
	err  error
}

func (e *ResourceAuthorizeError) Error() string {
	return fmt.Sprintf("cannot authorize resource with name %#x: %v", e.Name, e.err)
}

func (e *ResourceAuthorizeError) Unwrap() error {
	return e.err
}

func (*ResourceAuthorizeError) isPolicyDelimiterError() {}

type policyBranchName string

func (n policyBranchName) isValid() bool {
	if !utf8.ValidString(string(n)) {
		return false
	}
	if (len(n) > 0 && (n[0] == '$' || n[0] == '*')) || strings.HasPrefix(string(n), "â€¦") {
		return false
	}
	return true
}

func (n policyBranchName) Marshal(w io.Writer) error {
	if !n.isValid() {
		return errors.New("invalid name")
	}
	_, err := mu.MarshalToWriter(w, []byte(n))
	return err
}

func (n *policyBranchName) Unmarshal(r io.Reader) error {
	var b []byte
	if _, err := mu.UnmarshalFromReader(r, &b); err != nil {
		return err
	}
	name := policyBranchName(b)
	if !name.isValid() {
		return errors.New("invalid name")
	}
	*n = name
	return nil
}

type policyBranchPath string

func (p policyBranchPath) PopNextComponent() (next policyBranchPath, remaining policyBranchPath) {
	remaining = p
	for len(remaining) > 0 {
		s := strings.SplitN(string(remaining), "/", 2)
		remaining = ""
		if len(s) == 2 {
			remaining = policyBranchPath(s[1])
		}
		component := policyBranchPath(s[0])
		if len(component) > 0 {
			return component, remaining
		}
	}

	return "", ""
}

func (p policyBranchPath) Concat(path policyBranchPath) policyBranchPath {
	var pathElements []string
	if p != "" {
		pathElements = append(pathElements, string(p))
	}
	if path != "" {
		pathElements = append(pathElements, string(path))
	}
	return policyBranchPath(strings.Join(pathElements, "/"))
}

type policyTickets interface {
	ticket(authName tpm2.Name, policyRef tpm2.Nonce) *PolicyTicket
	addTicket(ticket *PolicyTicket)
	invalidTicket(ticket *PolicyTicket)
}

type policyRunner interface {
	session() policySession
	tickets() policyTickets
	resources() policyResources

	loadExternal(public *tpm2.Public) (ResourceContext, error)
	cpHash(cpHash *policyCpHashElement) error
	nameHash(nameHash *policyNameHashElement) error
	authorize(auth tpm2.ResourceContext, policy *Policy, usage *PolicySessionUsage, prefer tpm2.SessionType) (session tpm2.SessionContext, flushSession func(), err error)
	runBranch(branches policyBranches) (selected int, err error)
	runAuthorizedPolicy(keySign *tpm2.Public, policyRef tpm2.Nonce, policies []*Policy) (approvedPolicy tpm2.Digest, checkTicket *tpm2.TkVerified, err error)
}

type taggedHash struct {
	HashAlg tpm2.HashAlgorithmId
	Digest  tpm2.Digest
}

type policyNVElement struct {
	NvIndex   *tpm2.NVPublic
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

func (*policyNVElement) name() string { return "TPM2_PolicyNV assertion" }

func (e *policyNVElement) run(runner policyRunner) (err error) {
	nvIndex, err := tpm2.NewNVIndexResourceContextFromPub(e.NvIndex)
	if err != nil {
		return fmt.Errorf("cannot create nvIndex context: %w", err)
	}
	policy, err := runner.resources().policy(nvIndex.Name())
	if err != nil {
		return fmt.Errorf("cannot load nvIndex policy: %w", err)
	}

	var auth ResourceContext = newResourceContextFlushable(nvIndex, nil)
	switch {
	case e.NvIndex.Attrs&tpm2.AttrNVPolicyRead != 0:
		// use NV index for auth
	case e.NvIndex.Attrs&tpm2.AttrNVAuthRead != 0:
		// use NV index for auth
	case e.NvIndex.Attrs&tpm2.AttrNVOwnerRead != 0:
		auth, policy, err = runner.resources().loadedResource(tpm2.MakeHandleName(tpm2.HandleOwner))
	case e.NvIndex.Attrs&tpm2.AttrNVPPRead != 0:
		auth, policy, err = runner.resources().loadedResource(tpm2.MakeHandleName(tpm2.HandlePlatform))
	default:
		return errors.New("invalid nvIndex read auth mode")
	}
	if err != nil {
		return &PolicyNVError{
			Index: nvIndex.Handle(),
			Name:  nvIndex.Name(),
			err:   fmt.Errorf("cannot create auth context: %w", err),
		}
	}

	usage := NewPolicySessionUsage(
		tpm2.CommandPolicyNV,
		[]Named{auth.Resource(), nvIndex, runner.session().Name()},
		e.OperandB, e.Offset, e.Operation,
	)

	restoreSession, err := runner.session().Save()
	if err != nil {
		return fmt.Errorf("cannot save session: %w", err)
	}
	defer restoreSession()

	authSession, flushAuthSession, err := runner.authorize(auth.Resource(), policy, usage, tpm2.SessionTypePolicy)
	if err != nil {
		return &PolicyNVError{
			Index: nvIndex.Handle(),
			Name:  nvIndex.Name(),
			err:   &ResourceAuthorizeError{Name: nvIndex.Name(), err: err},
		}
	}
	defer flushAuthSession()

	if err := restoreSession(); err != nil {
		return fmt.Errorf("cannot restore session: %w", err)
	}

	if err := runner.session().PolicyNV(auth.Resource(), nvIndex, e.OperandB, e.Offset, e.Operation, authSession); err != nil {
		return &PolicyNVError{Index: nvIndex.Handle(), Name: nvIndex.Name(), err: err}
	}

	return nil
}

type policySecretElement struct {
	AuthObjectName tpm2.Name
	PolicyRef      tpm2.Nonce
	CpHashA        tpm2.Digest
	Expiration     int32
}

func (*policySecretElement) name() string { return "TPM2_PolicySecret assertion" }

func (e *policySecretElement) run(runner policyRunner) (err error) {
	if ticket := runner.tickets().ticket(e.AuthObjectName, e.PolicyRef); ticket != nil {
		err := runner.session().PolicyTicket(ticket.Timeout, ticket.CpHash, ticket.PolicyRef, ticket.AuthName, ticket.Ticket)
		switch {
		case tpm2.IsTPMParameterError(err, tpm2.ErrorExpired, tpm2.CommandPolicyTicket, 1):
			// The ticket has expired - ignore this and fall through to PolicySecret
			runner.tickets().invalidTicket(ticket)
		case tpm2.IsTPMParameterError(err, tpm2.ErrorTicket, tpm2.CommandPolicyTicket, 5):
			// The ticket is invalid - ignore this and fall through to PolicySecret
			runner.tickets().invalidTicket(ticket)
		case err != nil:
			return &PolicyAuthorizationError{AuthName: e.AuthObjectName, PolicyRef: e.PolicyRef, err: err}
		default:
			// The ticket was accepted
			return nil
		}
	}

	// LoadName can create additional sessions, so save the current one now.
	restoreSession, err := runner.session().Save()
	if err != nil {
		return fmt.Errorf("cannot save session: %w", err)
	}
	defer restoreSession()

	authObject, policy, err := runner.resources().loadedResource(e.AuthObjectName)
	if err != nil {
		return &PolicyAuthorizationError{
			AuthName:  e.AuthObjectName,
			PolicyRef: e.PolicyRef,
			err:       &ResourceLoadError{Name: e.AuthObjectName, err: err},
		}
	}
	defer func() {
		if authObject.Resource().Handle().Type() != tpm2.HandleTypeTransient {
			return
		}
		authObject.Flush()
	}()

	usage := NewPolicySessionUsage(
		tpm2.CommandPolicySecret,
		[]Named{authObject.Resource(), runner.session().Name()},
		e.CpHashA, e.PolicyRef, e.Expiration,
	)

	authSession, flushAuthSession, err := runner.authorize(authObject.Resource(), policy, usage, tpm2.SessionTypeHMAC)
	if err != nil {
		return &PolicyAuthorizationError{
			AuthName:  e.AuthObjectName,
			PolicyRef: e.PolicyRef,
			err:       &ResourceAuthorizeError{Name: e.AuthObjectName, err: err},
		}
	}
	defer flushAuthSession()

	if err := restoreSession(); err != nil {
		return fmt.Errorf("cannot restore session: %w", err)
	}

	timeout, ticket, err := runner.session().PolicySecret(authObject.Resource(), e.CpHashA, e.PolicyRef, e.Expiration, authSession)
	if err != nil {
		return &PolicyAuthorizationError{AuthName: e.AuthObjectName, PolicyRef: e.PolicyRef, err: err}
	}

	runner.tickets().addTicket(&PolicyTicket{
		AuthName:  e.AuthObjectName,
		PolicyRef: e.PolicyRef,
		CpHash:    nil,
		Timeout:   timeout,
		Ticket:    ticket})
	return nil
}

type policySignedElement struct {
	AuthKey   *tpm2.Public
	PolicyRef tpm2.Nonce
	Unused1   tpm2.Digest
	Unused2   int32
}

func (*policySignedElement) name() string { return "TPM2_PolicySigned assertion" }

func (e *policySignedElement) run(runner policyRunner) error {
	authKeyName := e.AuthKey.Name()
	if !authKeyName.IsValid() {
		return errors.New("invalid auth key name")
	}

	if ticket := runner.tickets().ticket(authKeyName, e.PolicyRef); ticket != nil {
		err := runner.session().PolicyTicket(ticket.Timeout, ticket.CpHash, ticket.PolicyRef, ticket.AuthName, ticket.Ticket)
		switch {
		case tpm2.IsTPMParameterError(err, tpm2.ErrorExpired, tpm2.CommandPolicyTicket, 1):
			// The ticket has expired - ignore this and fall through to PolicySigned
			runner.tickets().invalidTicket(ticket)
		case tpm2.IsTPMParameterError(err, tpm2.ErrorTicket, tpm2.CommandPolicyTicket, 5):
			// The ticket is invalid - ignore this and fall through to PolicySigned
			runner.tickets().invalidTicket(ticket)
		case err != nil:
			return &PolicyAuthorizationError{AuthName: authKeyName, PolicyRef: e.PolicyRef, err: err}
		default:
			// The ticket was accepted
			return nil
		}
	}

	auth, err := runner.resources().signedAuthorization(runner.session().NonceTPM(), authKeyName, e.PolicyRef)
	if err != nil {
		return &PolicyAuthorizationError{
			AuthName:  authKeyName,
			PolicyRef: e.PolicyRef,
			err:       fmt.Errorf("cannot obtain signed authorization: %w", err),
		}
	}

	authKey, err := runner.loadExternal(e.AuthKey)
	if err != nil {
		return fmt.Errorf("cannot create authKey context: %w", err)
	}
	defer authKey.Flush()

	includeNonceTPM := false
	if len(auth.NonceTPM) > 0 {
		includeNonceTPM = true
	}

	timeout, ticket, err := runner.session().PolicySigned(authKey.Resource(), includeNonceTPM, auth.CpHash, e.PolicyRef, auth.Expiration, auth.Authorization.Signature)
	if err != nil {
		return &PolicyAuthorizationError{AuthName: authKeyName, PolicyRef: e.PolicyRef, err: err}
	}

	runner.tickets().addTicket(&PolicyTicket{
		AuthName:  authKeyName,
		PolicyRef: e.PolicyRef,
		CpHash:    auth.CpHash,
		Timeout:   timeout,
		Ticket:    ticket})
	return nil
}

type policyAuthorizations []PolicyAuthorization

type policyAuthorizeElement struct {
	PolicyRef tpm2.Nonce
	KeySign   *tpm2.Public
}

func (*policyAuthorizeElement) name() string { return "authorized policy" }

func (e *policyAuthorizeElement) run(runner policyRunner) error {
	keySignName := e.KeySign.Name()
	if !keySignName.IsValid() {
		return errors.New("invalid keySign")
	}

	policies, err := runner.resources().authorizedPolicies(keySignName, e.PolicyRef)
	if err != nil {
		return &PolicyAuthorizationError{AuthName: keySignName, PolicyRef: e.PolicyRef, err: err}
	}

	// Filter out policies that aren't computed for the current session algorithm.
	var candidatePolicies []*Policy
	for _, policy := range policies {
		_, err := policy.Digest(runner.session().HashAlg())
		if err == ErrMissingDigest {
			continue
		}
		if err != nil {
			return err
		}

		candidatePolicies = append(candidatePolicies, policy)
	}

	approvedPolicy, checkTicket, err := runner.runAuthorizedPolicy(e.KeySign, e.PolicyRef, candidatePolicies)
	if err != nil {
		return &PolicyAuthorizationError{AuthName: keySignName, PolicyRef: e.PolicyRef, err: err}
	}

	if err := runner.session().PolicyAuthorize(approvedPolicy, e.PolicyRef, keySignName, checkTicket); err != nil {
		return &PolicyAuthorizationError{AuthName: keySignName, PolicyRef: e.PolicyRef, err: err}
	}
	return nil
}

type policyAuthValueElement struct{}

func (*policyAuthValueElement) name() string { return "TPM2_PolicyAuthValue assertion" }

func (*policyAuthValueElement) run(runner policyRunner) error {
	return runner.session().PolicyAuthValue()
}

type policyCommandCodeElement struct {
	CommandCode tpm2.CommandCode
}

func (*policyCommandCodeElement) name() string { return "TPM2_PolicyCommandCode assertion" }

func (e *policyCommandCodeElement) run(runner policyRunner) error {
	return runner.session().PolicyCommandCode(e.CommandCode)
}

type policyCounterTimerElement struct {
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

func (*policyCounterTimerElement) name() string { return "TPM2_PolicyCounterTimer assertion" }

func (e *policyCounterTimerElement) run(runner policyRunner) error {
	return runner.session().PolicyCounterTimer(e.OperandB, e.Offset, e.Operation)
}

type cpHashParams struct {
	CommandCode tpm2.CommandCode
	Handles     []tpm2.Name
	CpBytes     []byte
}

type policyCpHashElement struct {
	Params *cpHashParams `tpm2:"sized"`

	Digest tpm2.Digest
}

func (*policyCpHashElement) name() string { return "TPM2_PolicyCpHash assertion" }

func (e *policyCpHashElement) run(runner policyRunner) error {
	if err := runner.cpHash(e); err != nil {
		return err
	}
	return runner.session().PolicyCpHash(e.Digest)
}

type nameHashParams struct {
	Handles []tpm2.Name
}

type policyNameHashElement struct {
	Params *nameHashParams `tpm2:"sized"`

	Digest tpm2.Digest
}

func (*policyNameHashElement) name() string { return "TPM2_PolicyNameHash assertion" }

func (e *policyNameHashElement) run(runner policyRunner) error {
	if err := runner.nameHash(e); err != nil {
		return err
	}
	return runner.session().PolicyNameHash(e.Digest)
}

type policyBranch struct {
	Name          policyBranchName
	PolicyDigests tpm2.TaggedHashList
	Policy        policyElements
}

type policyBranches []*policyBranch

func (b policyBranches) selectBranch(next policyBranchPath) (int, error) {
	switch {
	case strings.HasPrefix(string(next), "â€¦"):
		return 0, fmt.Errorf("cannot select branch: invalid component \"%s\"", next)
	case next[0] == '$':
		// select branch by index
		var selected int
		if _, err := fmt.Sscanf(string(next), "$[%d]", &selected); err != nil {
			return 0, fmt.Errorf("cannot select branch: badly formatted path component \"%s\": %w", next, err)
		}
		if selected < 0 || selected >= len(b) {
			return 0, fmt.Errorf("cannot select branch: selected path %d out of range", selected)
		}
		return selected, nil
	default:
		// select branch by name
		for i, branch := range b {
			if len(branch.Name) == 0 {
				continue
			}
			if policyBranchPath(branch.Name) == next {
				return i, nil
			}
		}
		return 0, fmt.Errorf("cannot select branch: no branch with name \"%s\"", next)
	}
}

type policyORElement struct {
	Branches policyBranches
}

func (*policyORElement) name() string { return "branch node" }

func (e *policyORElement) run(runner policyRunner) error {
	selected, err := runner.runBranch(e.Branches)
	if err != nil {
		return err
	}

	// Obtain the branch digests
	var digests tpm2.DigestList
	for _, branch := range e.Branches {
		found := false
		for _, digest := range branch.PolicyDigests {
			if digest.HashAlg != runner.session().HashAlg() {
				continue
			}

			digests = append(digests, digest.Digest())
			found = true
			break
		}
		if !found {
			digests = append(digests, make([]byte, runner.session().HashAlg().Size()))
		}
	}

	tree, err := newPolicyOrTree(runner.session().HashAlg(), digests)
	if err != nil {
		return fmt.Errorf("cannot compute PolicyOR tree: %w", err)
	}

	pHashLists := tree.selectBranch(selected)

	for _, pHashList := range pHashLists {
		if err := runner.session().PolicyOR(pHashList); err != nil {
			return err
		}
	}
	return nil
}

type pcrValue struct {
	PCR    tpm2.Handle
	Digest tpm2.TaggedHash
}

type pcrValueList []pcrValue

type policyPCRElement struct {
	PCRs pcrValueList
}

func (*policyPCRElement) name() string { return "TPM2_PolicyPCR assertion" }

func (e *policyPCRElement) run(runner policyRunner) error {
	values, err := e.pcrValues()
	if err != nil {
		return err
	}
	pcrs, pcrDigest, err := ComputePCRDigestFromAllValues(runner.session().HashAlg(), values)
	if err != nil {
		return fmt.Errorf("cannot compute PCR digest: %w", err)
	}
	return runner.session().PolicyPCR(pcrDigest, pcrs)
}

func (e *policyPCRElement) pcrValues() (tpm2.PCRValues, error) {
	values := make(tpm2.PCRValues)
	for i, value := range e.PCRs {
		if value.PCR.Type() != tpm2.HandleTypePCR {
			return nil, fmt.Errorf("invalid PCR handle at index %d", i)
		}
		if err := values.SetValue(value.Digest.HashAlg, int(value.PCR), value.Digest.Digest()); err != nil {
			return nil, fmt.Errorf("invalid PCR value at index %d: %w", i, err)
		}
	}
	return values, nil
}

type policyDuplicationSelectElement struct {
	Object        tpm2.Name
	NewParent     tpm2.Name
	IncludeObject bool
}

func (*policyDuplicationSelectElement) name() string { return "TPM2_PolicyDuplicationSelect assertion" }

func (e *policyDuplicationSelectElement) run(runner policyRunner) error {
	return runner.session().PolicyDuplicationSelect(e.Object, e.NewParent, e.IncludeObject)
}

type policyPasswordElement struct{}

func (*policyPasswordElement) name() string { return "TPM2_PolicyPassword assertion" }

func (*policyPasswordElement) run(runner policyRunner) error {
	return runner.session().PolicyPassword()
}

type policyNvWrittenElement struct {
	WrittenSet bool
}

func (*policyNvWrittenElement) name() string { return "TPM2_PolicyNvWritten assertion" }

func (e *policyNvWrittenElement) run(runner policyRunner) error {
	return runner.session().PolicyNvWritten(e.WrittenSet)
}

type policyElementConstraint interface {
	policyNVElement | policySecretElement | policySignedElement | policyAuthorizeElement | policyAuthValueElement | policyCommandCodeElement | policyCounterTimerElement | policyCpHashElement | policyNameHashElement | policyORElement | policyPCRElement | policyDuplicationSelectElement | policyPasswordElement | policyNvWrittenElement
}

type policyElementDetails struct {
	contents union.Contents
}

func makePolicyElementDetails[T policyElementConstraint](contents T) policyElementDetails {
	return policyElementDetails{contents: union.NewContents(contents)}
}

func (d *policyElementDetails) NV() *policyNVElement {
	return union.ContentsPtr[policyNVElement](d.contents)
}

func (d *policyElementDetails) Secret() *policySecretElement {
	return union.ContentsPtr[policySecretElement](d.contents)
}

func (d *policyElementDetails) Signed() *policySignedElement {
	return union.ContentsPtr[policySignedElement](d.contents)
}

func (d *policyElementDetails) Authorize() *policyAuthorizeElement {
	return union.ContentsPtr[policyAuthorizeElement](d.contents)
}

func (d *policyElementDetails) AuthValue() *policyAuthValueElement {
	return union.ContentsPtr[policyAuthValueElement](d.contents)
}

func (d *policyElementDetails) CommandCode() *policyCommandCodeElement {
	return union.ContentsPtr[policyCommandCodeElement](d.contents)
}

func (d *policyElementDetails) CounterTimer() *policyCounterTimerElement {
	return union.ContentsPtr[policyCounterTimerElement](d.contents)
}

func (d *policyElementDetails) CpHash() *policyCpHashElement {
	return union.ContentsPtr[policyCpHashElement](d.contents)
}

func (d *policyElementDetails) NameHash() *policyNameHashElement {
	return union.ContentsPtr[policyNameHashElement](d.contents)
}

func (d *policyElementDetails) OR() *policyORElement {
	return union.ContentsPtr[policyORElement](d.contents)
}

func (d *policyElementDetails) PCR() *policyPCRElement {
	return union.ContentsPtr[policyPCRElement](d.contents)
}

func (d *policyElementDetails) DuplicationSelect() *policyDuplicationSelectElement {
	return union.ContentsPtr[policyDuplicationSelectElement](d.contents)
}

func (d *policyElementDetails) Password() *policyPasswordElement {
	return union.ContentsPtr[policyPasswordElement](d.contents)
}

func (d *policyElementDetails) NvWritten() *policyNvWrittenElement {
	return union.ContentsPtr[policyNvWrittenElement](d.contents)
}

func (d policyElementDetails) SelectMarshal(selector any) any {
	switch selector.(tpm2.CommandCode) {
	case tpm2.CommandPolicyNV:
		return union.ContentsMarshal[policyNVElement](d.contents)
	case tpm2.CommandPolicySecret:
		return union.ContentsMarshal[policySecretElement](d.contents)
	case tpm2.CommandPolicySigned:
		return union.ContentsMarshal[policySignedElement](d.contents)
	case tpm2.CommandPolicyAuthorize:
		return union.ContentsMarshal[policyAuthorizeElement](d.contents)
	case tpm2.CommandPolicyAuthValue:
		return union.ContentsMarshal[policyAuthValueElement](d.contents)
	case tpm2.CommandPolicyCommandCode:
		return union.ContentsMarshal[policyCommandCodeElement](d.contents)
	case tpm2.CommandPolicyCounterTimer:
		return union.ContentsMarshal[policyCounterTimerElement](d.contents)
	case tpm2.CommandPolicyCpHash:
		return union.ContentsMarshal[policyCpHashElement](d.contents)
	case tpm2.CommandPolicyNameHash:
		return union.ContentsMarshal[policyNameHashElement](d.contents)
	case tpm2.CommandPolicyOR:
		return union.ContentsMarshal[policyORElement](d.contents)
	case tpm2.CommandPolicyPCR:
		return union.ContentsMarshal[policyPCRElement](d.contents)
	case tpm2.CommandPolicyDuplicationSelect:
		return union.ContentsMarshal[policyDuplicationSelectElement](d.contents)
	case tpm2.CommandPolicyPassword:
		return union.ContentsMarshal[policyPasswordElement](d.contents)
	case tpm2.CommandPolicyNvWritten:
		return union.ContentsMarshal[policyNvWrittenElement](d.contents)
	default:
		return nil
	}
}

func (d *policyElementDetails) SelectUnmarshal(selector any) any {
	switch selector.(tpm2.CommandCode) {
	case tpm2.CommandPolicyNV:
		return union.ContentsUnmarshal[policyNVElement](&d.contents)
	case tpm2.CommandPolicySecret:
		return union.ContentsUnmarshal[policySecretElement](&d.contents)
	case tpm2.CommandPolicySigned:
		return union.ContentsUnmarshal[policySignedElement](&d.contents)
	case tpm2.CommandPolicyAuthorize:
		return union.ContentsUnmarshal[policyAuthorizeElement](&d.contents)
	case tpm2.CommandPolicyAuthValue:
		return union.ContentsUnmarshal[policyAuthValueElement](&d.contents)
	case tpm2.CommandPolicyCommandCode:
		return union.ContentsUnmarshal[policyCommandCodeElement](&d.contents)
	case tpm2.CommandPolicyCounterTimer:
		return union.ContentsUnmarshal[policyCounterTimerElement](&d.contents)
	case tpm2.CommandPolicyCpHash:
		return union.ContentsUnmarshal[policyCpHashElement](&d.contents)
	case tpm2.CommandPolicyNameHash:
		return union.ContentsUnmarshal[policyNameHashElement](&d.contents)
	case tpm2.CommandPolicyOR:
		return union.ContentsUnmarshal[policyORElement](&d.contents)
	case tpm2.CommandPolicyPCR:
		return union.ContentsUnmarshal[policyPCRElement](&d.contents)
	case tpm2.CommandPolicyDuplicationSelect:
		return union.ContentsUnmarshal[policyDuplicationSelectElement](&d.contents)
	case tpm2.CommandPolicyPassword:
		return union.ContentsUnmarshal[policyPasswordElement](&d.contents)
	case tpm2.CommandPolicyNvWritten:
		return union.ContentsUnmarshal[policyNvWrittenElement](&d.contents)
	default:
		return nil
	}
}

type policyElementRunner interface {
	name() string
	run(runner policyRunner) error
}

type policyElement struct {
	Type    tpm2.CommandCode
	Details policyElementDetails
}

func (e *policyElement) runner() policyElementRunner {
	switch e.Type {
	case tpm2.CommandPolicyNV:
		return e.Details.NV()
	case tpm2.CommandPolicySecret:
		return e.Details.Secret()
	case tpm2.CommandPolicySigned:
		return e.Details.Signed()
	case tpm2.CommandPolicyAuthorize:
		return e.Details.Authorize()
	case tpm2.CommandPolicyAuthValue:
		return e.Details.AuthValue()
	case tpm2.CommandPolicyCommandCode:
		return e.Details.CommandCode()
	case tpm2.CommandPolicyCounterTimer:
		return e.Details.CounterTimer()
	case tpm2.CommandPolicyCpHash:
		return e.Details.CpHash()
	case tpm2.CommandPolicyNameHash:
		return e.Details.NameHash()
	case tpm2.CommandPolicyOR:
		return e.Details.OR()
	case tpm2.CommandPolicyPCR:
		return e.Details.PCR()
	case tpm2.CommandPolicyDuplicationSelect:
		return e.Details.DuplicationSelect()
	case tpm2.CommandPolicyPassword:
		return e.Details.Password()
	case tpm2.CommandPolicyNvWritten:
		return e.Details.NvWritten()
	default:
		panic("invalid type")
	}
}

type policyElements []*policyElement

type policy struct {
	PolicyDigests        tpm2.TaggedHashList
	PolicyAuthorizations policyAuthorizations
	Policy               policyElements
}

// Policy corresponds to an authorization policy. It can be serialized with
// [github.com/canonical/go-tpm2/mu].
type Policy struct {
	policy policy
}

// Marshal implements [mu.CustomMarshaller.Marshal].
func (p Policy) Marshal(w io.Writer) error {
	_, err := mu.MarshalToWriter(w, uint32(0), p.policy)
	return err
}

// Unmarshal implements [mu.CustomMarshaller.Unarshal].
func (p *Policy) Unmarshal(r io.Reader) error {
	var version uint32
	_, err := mu.UnmarshalFromReader(r, &version, &p.policy)
	if err != nil {
		return err
	}
	if version != 0 {
		return errors.New("invalid version")
	}
	return nil
}

type executePolicyTickets struct {
	usageCpHash tpm2.Digest

	tickets        map[authMapKey][]*PolicyTicket
	newTickets     map[ticketMapKey]*PolicyTicket
	invalidTickets map[ticketMapKey]*PolicyTicket
}

func newExecutePolicyTickets(alg tpm2.HashAlgorithmId, tickets []*PolicyTicket, usage *PolicySessionUsage) (*executePolicyTickets, error) {
	var usageCpHash tpm2.Digest
	if usage != nil {
		var err error
		usageCpHash, err = ComputeCpHash(alg, usage.commandCode, usage.handles, usage.params...)
		if err != nil {
			return nil, fmt.Errorf("cannot compute cpHash from usage: %w", err)
		}

	}

	ticketMap := make(map[authMapKey][]*PolicyTicket)
	for _, ticket := range tickets {
		key := makeAuthMapKey(ticket.AuthName, ticket.PolicyRef)
		if _, exists := ticketMap[key]; !exists {
			ticketMap[key] = []*PolicyTicket{}
		}
		ticketMap[key] = append(ticketMap[key], ticket)
	}

	return &executePolicyTickets{
		usageCpHash:    usageCpHash,
		tickets:        ticketMap,
		newTickets:     make(map[ticketMapKey]*PolicyTicket),
		invalidTickets: make(map[ticketMapKey]*PolicyTicket),
	}, nil
}

func (t *executePolicyTickets) ticket(authName tpm2.Name, policyRef tpm2.Nonce) *PolicyTicket {
	tickets := t.tickets[makeAuthMapKey(authName, policyRef)]
	if len(tickets) == 0 {
		return nil
	}
	if len(t.usageCpHash) == 0 {
		return tickets[0]
	}
	for _, ticket := range tickets {
		if len(ticket.CpHash) == 0 {
			return ticket
		}
		if bytes.Equal(ticket.CpHash, t.usageCpHash) {
			return ticket
		}
	}
	return nil
}

func (t *executePolicyTickets) addTicket(ticket *PolicyTicket) {
	if ticket.Ticket == nil || (ticket.Ticket.Hierarchy == tpm2.HandleNull && len(ticket.Ticket.Digest) == 0) {
		// skip null tickets
		return
	}

	key := makeAuthMapKey(ticket.AuthName, ticket.PolicyRef)
	if _, exists := t.tickets[key]; !exists {
		t.tickets[key] = []*PolicyTicket{}
	}
	t.tickets[key] = append(t.tickets[key], ticket)

	t.newTickets[makeTicketMapKey(ticket)] = ticket
}

func (t *executePolicyTickets) invalidTicket(ticket *PolicyTicket) {
	key := makeAuthMapKey(ticket.AuthName, ticket.PolicyRef)

	var tickets []*PolicyTicket
	for _, tk := range t.tickets[key] {
		if tk == ticket {
			continue
		}
		tickets = append(tickets, tk)
	}
	t.tickets[key] = tickets

	t.invalidTickets[makeTicketMapKey(ticket)] = ticket
}

func (t *executePolicyTickets) currentTickets() (out []*PolicyTicket) {
	for _, tickets := range t.tickets {
		for _, ticket := range tickets {
			out = append(out, ticket)
		}
	}
	return out
}

type policyExecuteRunner struct {
	tpm        TPMConnection
	sessionAlg tpm2.HashAlgorithmId

	policySession   *teePolicySession
	policyTickets   *executePolicyTickets
	policyResources *executePolicyResources

	authorizer Authorizer

	usage                *PolicySessionUsage
	ignoreAuthorizations []PolicyAuthorizationID
	ignoreNV             []Named

	remaining   policyBranchPath
	currentPath policyBranchPath
}

func newPolicyExecuteRunner(tpm TPMConnection, session tpm2.SessionContext, tickets *executePolicyTickets, resources *executePolicyResources, authorizer Authorizer, params *PolicyExecuteParams, details *PolicyBranchDetails) *policyExecuteRunner {
	return &policyExecuteRunner{
		tpm:        tpm,
		sessionAlg: session.HashAlg(),
		policySession: newTeePolicySession(
			newTpmPolicySession(tpm, session),
			newBranchDetailsCollector(session.HashAlg(), details),
		),
		policyTickets:        tickets,
		policyResources:      resources,
		authorizer:           authorizer,
		usage:                params.Usage,
		ignoreAuthorizations: params.IgnoreAuthorizations,
		ignoreNV:             params.IgnoreNV,
		remaining:            policyBranchPath(params.Path),
	}
}

func (r *policyExecuteRunner) session() policySession {
	return r.policySession
}

func (r *policyExecuteRunner) tickets() policyTickets {
	return r.policyTickets
}

func (r *policyExecuteRunner) resources() policyResources {
	return r.policyResources
}

func (r *policyExecuteRunner) loadExternal(public *tpm2.Public) (ResourceContext, error) {
	resource, err := r.tpm.LoadExternal(nil, public, tpm2.HandleOwner)
	if err != nil {
		return nil, err
	}
	return newResourceContextFlushable(resource, r.tpm.FlushContext), nil
}

func (r *policyExecuteRunner) cpHash(cpHash *policyCpHashElement) error {
	return nil
}

func (r *policyExecuteRunner) nameHash(nameHash *policyNameHashElement) error {
	return nil
}

func (r *policyExecuteRunner) authorize(auth tpm2.ResourceContext, policy *Policy, usage *PolicySessionUsage, prefer tpm2.SessionType) (session tpm2.SessionContext, flushSession func(), err error) {
	sessionType := prefer
	alg := auth.Name().Algorithm()

	switch auth.Handle().Type() {
	case tpm2.HandleTypeNVIndex:
		pub, _, err := r.tpm.NVReadPublic(auth)
		if err != nil {
			return nil, nil, fmt.Errorf("cannot obtain NVPublic: %w", err)
		}
		switch {
		case pub.Attrs&(tpm2.AttrNVAuthRead|tpm2.AttrNVPolicyRead) == tpm2.AttrNVAuthRead:
			sessionType = tpm2.SessionTypeHMAC
		case pub.Attrs&(tpm2.AttrNVAuthRead|tpm2.AttrNVPolicyRead) == tpm2.AttrNVPolicyRead:
			sessionType = tpm2.SessionTypePolicy
		}
	case tpm2.HandleTypePermanent:
		// auth value is always available
		sessionType = tpm2.SessionTypeHMAC
		alg = r.sessionAlg
	case tpm2.HandleTypeTransient, tpm2.HandleTypePersistent:
		pub, _, _, err := r.tpm.ReadPublic(auth)
		if err != nil {
			return nil, nil, fmt.Errorf("cannot obtain Public: %w", err)
		}
		if pub.Attrs&tpm2.AttrUserWithAuth == 0 {
			sessionType = tpm2.SessionTypePolicy
		}
	default:
		return nil, nil, errors.New("unexpected handle type")
	}

	if policy == nil {
		sessionType = tpm2.SessionTypeHMAC
	}

	session, err = r.tpm.StartAuthSession(sessionType, alg)
	if err != nil {
		return nil, nil, fmt.Errorf("cannot create session to authorize auth object: %w", err)
	}
	flushSession = func() {
		r.tpm.FlushContext(session)
	}
	defer func() {
		if err == nil {
			return
		}
		r.tpm.FlushContext(session)
	}()

	var authValueNeeded bool
	if sessionType == tpm2.SessionTypePolicy {
		if policy == nil {
			return nil, nil, errors.New("no policy")
		}

		params := &PolicyExecuteParams{
			Usage:                usage,
			IgnoreAuthorizations: r.ignoreAuthorizations,
			IgnoreNV:             r.ignoreNV,
		}

		var details PolicyBranchDetails
		runner := newPolicyExecuteRunner(r.tpm, session, r.policyTickets, r.policyResources, r.authorizer, params, &details)
		if err := runner.run(policy.policy.Policy); err != nil {
			return nil, nil, err
		}

		authValueNeeded = details.AuthValueNeeded
	} else {
		authValueNeeded = true
	}

	if authValueNeeded {
		if err := r.authorizer.Authorize(auth); err != nil {
			return nil, nil, fmt.Errorf("cannot authorize resource: %w", err)
		}
	}

	return session, flushSession, nil
}

func (r *policyExecuteRunner) runBranch(branches policyBranches) (selected int, err error) {
	if len(branches) == 0 {
		return 0, errors.New("no branches")
	}

	for _, branch := range branches {
		found := false
		for _, digest := range branch.PolicyDigests {
			if digest.HashAlg != r.sessionAlg {
				continue
			}

			found = true
		}
		if !found {
			return 0, ErrMissingDigest
		}
	}

	next, remaining := r.remaining.PopNextComponent()
	if len(next) == 0 || next[0] == '*' {
		// There are no more components or the next component is a wildcard match - build a
		// list of candidate paths for this subtree
		selector := newPolicyPathSelector(r.sessionAlg, r.policyResources, r.tpm, r.usage, r.ignoreAuthorizations, r.ignoreNV)
		path, err := selector.selectPath(branches)
		if err != nil {
			return 0, fmt.Errorf("cannot automatically select branch: %w", err)
		}

		switch next {
		case "":
			// We have a path for this whole subtree
			r.remaining = path
		case "**":
			// Prepend the path for this whole subtree to the remaining components
			r.remaining = path.Concat(remaining)
		case "*":
			// Prepend the first component of the path for this subtree to the remaining components
			component, _ := path.PopNextComponent()
			r.remaining = component.Concat(remaining)
		default:
			panic("not reached")
		}

		// rerun branch node
		return r.runBranch(branches)
	}

	// We have a branch selector
	r.remaining = remaining
	selected, err = branches.selectBranch(next)
	if err != nil {
		return 0, err
	}

	// Run it!
	name := policyBranchPath(branches[selected].Name)
	if len(name) == 0 {
		name = next
	}
	r.currentPath = r.currentPath.Concat(name)
	if err := r.run(branches[selected].Policy); err != nil {
		return 0, err
	}

	return selected, nil
}

func (r *policyExecuteRunner) runAuthorizedPolicy(keySign *tpm2.Public, policyRef tpm2.Nonce, policies []*Policy) (approvedPolicy tpm2.Digest, checkTicket *tpm2.TkVerified, err error) {
	if len(policies) == 0 {
		return nil, nil, errors.New("no policies")
	}

	var branches policyBranches
	for _, policy := range policies {
		digest, err := policy.Digest(r.sessionAlg)
		if err == ErrMissingDigest {
			continue
		}
		if err != nil {
			return nil, nil, err
		}

		branches = append(branches, &policyBranch{
			Name:   policyBranchName(fmt.Sprintf("%x", digest)),
			Policy: policy.policy.Policy,
		})
	}

	next, remaining := r.remaining.PopNextComponent()
	switch {
	case len(next) > 0 && next[0] == '$':
		// Don't permit numeric selectors for authorized policies.
		return nil, nil, fmt.Errorf("invalid path component \"%s\" for authorized policy selector", next)
	case len(next) == 0 || next[0] == '*':
		// There are no more components or the next component is a wildcard match - build a
		// list of candidate paths for this subtree
		selector := newPolicyPathSelector(r.sessionAlg, r.policyResources, r.tpm, r.usage, r.ignoreAuthorizations, r.ignoreNV)
		path, err := selector.selectPath(branches)
		if err != nil {
			return nil, nil, fmt.Errorf("cannot automatically select policy: %w", err)
		}

		switch next {
		case "":
			// We have a path for this whole subtree
			r.remaining = path
		case "**":
			// Prepend the path for this whole subtree to the remaining components
			r.remaining = path.Concat(remaining)
		case "*":
			// Prepend the first component of the path for this subtree to the remaining components
			component, _ := path.PopNextComponent()
			r.remaining = component.Concat(remaining)
		default:
			panic("not reached")
		}

		// rerun
		return r.runAuthorizedPolicy(keySign, policyRef, policies)
	}

	// We have a policy selector
	r.remaining = remaining
	selected, err := branches.selectBranch(next)
	if err != nil {
		return nil, nil, err
	}

	policy := policies[selected]

	// Find the approved digest
	approvedPolicy, err = policy.Digest(r.sessionAlg)
	if err != nil {
		return nil, nil, err
	}

	// Find the signed authorization
	var policyAuth *PolicyAuthorization
	for _, auth := range policy.policy.PolicyAuthorizations {
		if !bytes.Equal(auth.AuthKey.Name(), keySign.Name()) {
			continue
		}
		if !bytes.Equal(auth.PolicyRef, policyRef) {
			continue
		}
		policyAuth = &auth
		break
	}
	if policyAuth == nil || policyAuth.Signature == nil {
		// this should only happen if the caller supplied policies without
		// a valid authorization
		return nil, nil, errors.New("missing policy authorization")
	}

	// Verify the signature
	authKey, err := r.tpm.LoadExternal(nil, keySign, tpm2.HandleOwner)
	if err != nil {
		return nil, nil, err
	}
	defer r.tpm.FlushContext(authKey)

	tbs := ComputePolicyAuthorizationTBSDigest(keySign.Name().Algorithm().GetHash(), approvedPolicy, policyRef)
	ticket, err := r.tpm.VerifySignature(authKey, tbs, policyAuth.Signature)
	if err != nil {
		return nil, nil, err
	}

	// Run the policy
	r.currentPath = r.currentPath.Concat(next)
	if err := r.run(policy.policy.Policy); err != nil {
		return nil, nil, err
	}

	return approvedPolicy, ticket, nil
}

func (r *policyExecuteRunner) run(elements policyElements) error {
	for len(elements) > 0 {
		element := elements[0].runner()
		elements = elements[1:]
		if err := element.run(r); err != nil {
			return makePolicyError(err, r.currentPath, element.name())
		}
	}

	return nil
}

// PolicySessionUsage describes how a policy session will be used, and assists with
// automatically selecting branches where a policy has command context-specific branches.
type PolicySessionUsage struct {
	commandCode tpm2.CommandCode
	handles     []Named
	params      []interface{}
	nvHandle    tpm2.Handle
	noAuthValue bool
}

// NewPolicySessionUsage creates a new PolicySessionUsage.
func NewPolicySessionUsage(command tpm2.CommandCode, handles []Named, params ...interface{}) *PolicySessionUsage {
	return &PolicySessionUsage{
		commandCode: command,
		handles:     handles,
		params:      params,
	}
}

// WithNVHandle indicates that the policy session is being used to authorize a NV
// index with the specified handle. This will panic if handle is not a NV index.
func (u *PolicySessionUsage) WithNVHandle(handle tpm2.Handle) *PolicySessionUsage {
	if handle.Type() != tpm2.HandleTypeNVIndex {
		panic("invalid handle")
	}
	u.nvHandle = handle
	return u
}

// NoAuthValue indicates that the policy session is being used to authorize a
// resource that the authorization value cannot be determined for.
func (u *PolicySessionUsage) NoAuthValue() *PolicySessionUsage {
	u.noAuthValue = true
	return u
}

// PolicyAuthorizationID contains an identifier for a TPM2_PolicySecret,
// TPM2_PolicySigned or TPM2_PolicyAuthorize assertion.
type PolicyAuthorizationID = PolicyAuthorizationDetails

// PolicyExecuteParams contains parameters that are useful for executing a policy.
type PolicyExecuteParams struct {
	// Tickets supplies tickets for TPM2_PolicySecret and TPM2_PolicySigned assertions.
	// These are also passed to sub-policies.
	Tickets []*PolicyTicket

	// Usage describes how the executed policy will be used, and assists with
	// automatically selecting branches where a policy has command context-specific
	// branches.
	Usage *PolicySessionUsage

	// Path provides a way to explicitly select branches or authorized policies to
	// execute. A path consists of zero or more components separated by a '/'
	// character, with each component identifying a branch to select when a branch
	// node is encountered (or a policy to select when an authorized policy is
	// required) during execution. When a branch node or authorized policy is
	// encountered, the selected sub-branch or policy is executed before resuming
	// execution in the original branch.
	//
	// When selecting a branch, a component can either identify a branch by its
	// name (if it has one), or it can be a numeric identifier of the form "$[n]"
	// which selects the branch at index n.
	//
	// When selecting an authorized policy, a component identifies the policy by
	// specifying the digest of the policy for the current session algorithm.
	//
	// If a component is "**", then Policy.Execute will attempt to automatically
	// select an execution path for the entire sub-tree associated with the current
	// branch node or authorized policy. This includes choosing additional
	// branches and authorized policies encountered during the execution of the
	// selected sub-tree. Remaining path components will be consumed when resuming
	// execution in the original branch
	//
	// If a component is "*", then Policy.Execute will attempt to automatically
	// select an immediate sub-branch or authorized policy, but additional branches
	// and authorized policies encountered during the execution of the selected
	// sub-tree will consume additional path components.
	//
	// If the path has insufficent components for the branch nodes or authorized policies
	// encountered in a policy, Policy.Execute will attempt to select an appropriate
	// execution path for the remainder of the policy automatically.
	Path string

	// IgnoreAuthorizations can be used to indicate that branches containing TPM2_PolicySigned,
	// TPM2_PolicySecret or TPM2_PolicyAuthorize assertions matching the specified ID should
	// be ignored. This can be used where these assertions have failed on previous runs.
	// This propagates to sub-policies.
	IgnoreAuthorizations []PolicyAuthorizationID

	// IgnoreNV can be used to indicate that branches containing TPM2_PolicyNV assertions
	// with an NV index matching the specified name should be ignored. This can be used where
	// these assertions have failed due to an authorization issue on previous runs. This
	// propagates to sub-policies.
	IgnoreNV []Named
}

// PolicyExecuteResult is returned from [Policy.Execute].
type PolicyExecuteResult struct {
	// NewTickets contains tickets that were created as a result of executing this policy.
	NewTickets []*PolicyTicket

	// InvalidTickets contains those tickets originally supplied to [Policy.Execute] that
	// were used but found to be invalid. These tickets shouldn't be supplied to
	// [Policy.Execute] again.
	InvalidTickets []*PolicyTicket

	// AuthValueNeeded indicates that the policy executed the TPM2_PolicyAuthValue or
	// TPM2_PolicyPassword assertion.
	AuthValueNeeded bool

	// Path indicates the executed path.
	Path string
}

// Execute runs this policy using the supplied TPM context and on the supplied policy session.
//
// The caller may supply additional parameters via the PolicyExecuteParams struct, which is an
// optional argument.
//
// Resources required by a policy are obtained from the supplied PolicyResources, which is
// optional but must be supplied for any policy that executes TPM2_PolicyNV, TPM2_PolicySecret,
// TPM2_PolicySigned or TPM2_PolicyAuthorize assertions.
//
// The caller may explicitly select branches and authorized policies to execute via the Path
// argument of [PolicyExecuteParams]. Alternatively, if a path is not specified explicitly,
// or a component contains a wildcard match, an appropriate execution path is selected
// automatically where possible. This works by selecting the first suitable path, with a
// preference for paths that don't include TPM2_PolicySecret, TPM2_PolicySigned,
// TPM2_PolicyAuthValue, and TPM2_PolicyPassword assertions. It also has a preference for paths
// that don't include TPM2_PolicyNV assertions that require authorization to use or read. A path
// is omitted from the set of suitable paths if any of the following conditions are true:
//   - It contains a command code, command parameter hash, or name hash that doesn't match
//     the supplied [PolicySessionUsage].
//   - It contains a TPM2_PolicyAuthValue or TPM2_PolicyPassword assertion and this isn't permitted
//     by the supplied [PolicySessionUsage].
//   - It uses TPM2_PolicyNvWritten with a value that doesn't match the public area of the NV index
//     provided via the supplied [PolicySessionUsage].
//   - It uses TPM2_PolicySigned, TPM2_PolicySecret or TPM2_PolicyAuthorize and the specific
//     authorization is included in the IgnoreAuthorizations field of [PolicyExecuteParams].
//   - It uses TPM2_PolicyNV and the NV index is included in the IgnoreNV field of
//     [PolicyExecuteParams]
//   - It uses TPM2_PolicyNV with conditions that will fail against the current NV index contents,
//     if the index has an authorization policy that permits the use of TPM2_NV_Read without any
//     other conditions, else the condition isn't checked.
//   - It uses TPM2_PolicyPCR with values that don't match the current PCR values.
//   - It uses TPM2_PolicyCounterTimer with conditions that will fail.
//
// Note that this automatic selection makes the following assumptions:
//   - TPM2_PolicySecret assertions always succeed. Where they are known to not succeed because
//     the authorization value isn't known or the resource can't be loaded, add the assertion
//     details to the IgnoreAuthorizations field of [PolicyExecuteParams].
//   - TPM2_PolicySigned assertions always succeed. Where they are known to not succeed because
//     an assertion can't be provided or it is invalid, add the assertion details to the
//     IgnoreAuthorizations field of [PolicyExecuteParams].
//   - TPM2_PolicyAuthorize assertions always succeed if policies are returned from the
//     implementation of [PolicyResourceLoader.LoadAuthorizedPolicies]. Where these are known
//     to not succeed, add the assertion details to the IgnoreAuthorizations field of
//     [PolicyExecuteParams].
//   - TPM2_PolicyNV assertions on NV indexes that require authorization to read will always
//     succeed. Where these are known to not suceed, add the assertion details to the IgnoreNV
//     field of [PolicyExecuteParams].
//
// On success, the supplied policy session may be used for authorization in a context that requires
// that this policy is satisfied. Information about the result of executing the session is also
// returned.
func (p *Policy) Execute(tpm TPMConnection, session tpm2.SessionContext, resources PolicyResources, params *PolicyExecuteParams) (result *PolicyExecuteResult, err error) {
	if tpm == nil {
		return nil, errors.New("no TPM")
	}
	if session == nil {
		return nil, errors.New("no session")
	}
	if resources == nil {
		resources = new(nullPolicyResources)
	}
	if params == nil {
		params = new(PolicyExecuteParams)
	}

	tickets, err := newExecutePolicyTickets(session.HashAlg(), params.Tickets, params.Usage)
	if err != nil {
		return nil, err
	}

	var details PolicyBranchDetails
	runner := newPolicyExecuteRunner(
		tpm,
		session,
		tickets,
		newExecutePolicyResources(tpm, resources, tickets, params.IgnoreAuthorizations, params.IgnoreNV),
		resources,
		params,
		&details,
	)
	if err := runner.run(p.policy.Policy); err != nil {
		return nil, err
	}

	result = &PolicyExecuteResult{
		AuthValueNeeded: details.AuthValueNeeded,
		Path:            string(runner.currentPath),
	}

	for _, ticket := range tickets.newTickets {
		result.NewTickets = append(result.NewTickets, ticket)
	}
	for _, ticket := range tickets.invalidTickets {
		result.InvalidTickets = append(result.InvalidTickets, ticket)
	}

	return result, nil
}

type nullTickets struct{}

func (*nullTickets) ticket(authName tpm2.Name, policyRef tpm2.Nonce) *PolicyTicket {
	return nil
}

func (*nullTickets) addTicket(ticket *PolicyTicket)     {}
func (*nullTickets) invalidTicket(ticket *PolicyTicket) {}

type policyComputeRunner struct {
	policySession   *computePolicySession
	policyTickets   nullTickets
	policyResources mockPolicyResources

	currentPath policyBranchPath
	hasCpHash   bool
}

func newPolicyComputeRunner(digest *taggedHash) *policyComputeRunner {
	return &policyComputeRunner{
		policySession: newComputePolicySession(digest),
	}
}

func (r *policyComputeRunner) session() policySession {
	return r.policySession
}

func (r *policyComputeRunner) tickets() policyTickets {
	return &r.policyTickets
}

func (r *policyComputeRunner) resources() policyResources {
	return &r.policyResources
}

func (r *policyComputeRunner) loadExternal(public *tpm2.Public) (ResourceContext, error) {
	// the handle is not relevant here
	resource := tpm2.NewLimitedResourceContext(0x80000000, public.Name())
	return newResourceContextFlushable(resource, nil), nil
}

func (r *policyComputeRunner) cpHash(cpHash *policyCpHashElement) error {
	r.hasCpHash = true
	if cpHash.Params == nil {
		return nil
	}
	digest, err := computeCpHash(r.session().HashAlg(), cpHash.Params.CommandCode, cpHash.Params.Handles, cpHash.Params.CpBytes)
	if err != nil {
		return fmt.Errorf("cannot compute cpHashA: %w", err)
	}
	cpHash.Params = nil
	cpHash.Digest = digest
	return nil
}

func (r *policyComputeRunner) nameHash(nameHash *policyNameHashElement) error {
	r.hasCpHash = true
	if nameHash.Params == nil {
		return nil
	}
	digest, err := computeNameHash(r.session().HashAlg(), nameHash.Params.Handles)
	if err != nil {
		return fmt.Errorf("cannot compute nameHash: %w", err)
	}
	nameHash.Digest = digest
	nameHash.Params = nil
	return nil
}

func (r *policyComputeRunner) authorize(auth tpm2.ResourceContext, policy *Policy, usage *PolicySessionUsage, prefer tpm2.SessionType) (session tpm2.SessionContext, flushSession func(), err error) {
	return nil, func() {}, nil
}

func (r *policyComputeRunner) runBranch(branches policyBranches) (selected int, err error) {
	currentDigest, err := r.session().PolicyGetDigest()
	if err != nil {
		return 0, err
	}

	for i, branch := range branches {
		computedDigest := taggedHash{
			HashAlg: r.session().HashAlg(),
			Digest:  currentDigest,
		}

		name := policyBranchPath(branch.Name)
		if len(name) == 0 {
			name = policyBranchPath(fmt.Sprintf("$[%d]", i))
		}

		err := func() error {
			origPolicySession := r.policySession
			origPath := r.currentPath
			r.policySession = newComputePolicySession(&computedDigest)
			r.currentPath = r.currentPath.Concat(name)
			defer func() {
				r.policySession = origPolicySession
				r.currentPath = origPath
			}()

			return r.run(branch.Policy)
		}()
		if err != nil {
			return 0, err
		}

		added := false
		for j, digest := range branch.PolicyDigests {
			if digest.HashAlg != r.session().HashAlg() {
				continue
			}

			branch.PolicyDigests[j] = tpm2.MakeTaggedHash(computedDigest.HashAlg, computedDigest.Digest)
			added = true
			break
		}
		if !added {
			branch.PolicyDigests = append(branch.PolicyDigests, tpm2.MakeTaggedHash(computedDigest.HashAlg, computedDigest.Digest))
		}
	}

	r.currentPath = r.currentPath.Concat("**")
	return 0, nil
}

func (r *policyComputeRunner) runAuthorizedPolicy(keySign *tpm2.Public, policyRef tpm2.Nonce, policies []*Policy) (approvedPolicy tpm2.Digest, checkTicket *tpm2.TkVerified, err error) {
	return nil, nil, nil
}

func (r *policyComputeRunner) run(elements policyElements) error {
	for len(elements) > 0 {
		element := elements[0].runner()
		elements = elements[1:]
		if err := element.run(r); err != nil {
			return makePolicyError(err, r.currentPath, element.name())
		}
	}

	return nil
}

func (p *Policy) computeForDigest(digest *taggedHash) error {
	var policy *policy
	if err := mu.CopyValue(&policy, p.policy); err != nil {
		return fmt.Errorf("cannot make temporary copy of policy: %w", err)
	}

	runner := newPolicyComputeRunner(digest)
	if err := runner.run(policy.Policy); err != nil {
		return err
	}

	addedDigest := false
	for i, d := range policy.PolicyDigests {
		if d.HashAlg == digest.HashAlg {
			policy.PolicyDigests[i] = tpm2.MakeTaggedHash(digest.HashAlg, digest.Digest)
			addedDigest = true
			break
		}
	}
	if !addedDigest {
		policy.PolicyDigests = append(policy.PolicyDigests, tpm2.MakeTaggedHash(digest.HashAlg, digest.Digest))
	}

	if runner.hasCpHash && len(policy.PolicyDigests) > 1 {
		return errors.New("policies that use TPM2_PolicyCpHash and TPM2_PolicyNameHash can't be computed for more than one digest algorithm")
	}

	p.policy = *policy
	return nil
}

// Compute computes the digest for this policy for the specified algorithm. This also
// updates stored digests within the policy, so the policy should be persisted after
// calling this. On success, it returns the computed digest.
//
// Policies that contain TPM2_PolicyCpHash or TPM2_PolicyNameHash assertions can only
// be computed for a single digest algorithm. An error will be returned if the policy has
// already been computed for another algorithm.
func (p *Policy) Compute(alg tpm2.HashAlgorithmId) (tpm2.Digest, error) {
	if !alg.IsValid() {
		return nil, errors.New("invalid algorithm")
	}

	if digest, err := p.Digest(alg); err == nil {
		return digest, nil
	}

	digest := taggedHash{HashAlg: alg, Digest: make(tpm2.Digest, alg.Size())}
	if err := p.computeForDigest(&digest); err != nil {
		return nil, err
	}

	return digest.Digest, nil
}

// Digest returns the digest for this policy for the specified algorithm, if it
// has been computed. If it hasn't been computed, ErrMissingDigest is returned.
func (p *Policy) Digest(alg tpm2.HashAlgorithmId) (tpm2.Digest, error) {
	if !alg.IsValid() {
		return nil, errors.New("invalid algorithm")
	}

	for _, digest := range p.policy.PolicyDigests {
		if digest.HashAlg == alg {
			return digest.Digest(), nil
		}
	}

	return nil, ErrMissingDigest
}

// Authorize signs this policy with the supplied signer so that it can be used as an
// authorized policy for a TPM2_PolicyAuthorize assertion with the supplied authKey and
// policyRef. Calling this updates the policy, so it should be persisted afterwards.
//
// TPM2_PolicyAuthorize expects the digest algorithm of the signature to match the name
// algorithm of the public key, so the name algorithm of authKey must match the algorithm
// supplied through the opts argument. This function also uses the name algorithm of
// authKey to select the policy digest to sign, so the name algorithm of authKey should
// match the name algorithm of the resource that this policy is associated with.
//
// This will compute the policy for the selected algorithm if it hasn't been computed
// already.
func (p *Policy) Authorize(rand io.Reader, authKey *tpm2.Public, policyRef tpm2.Nonce, signer crypto.Signer, opts crypto.SignerOpts) error {
	authName := authKey.Name()
	hashAlg := authName.Algorithm()
	if opts.HashFunc() != hashAlg.GetHash() {
		return errors.New("mismatched authKey name and opts")
	}

	approvedPolicy, err := p.Compute(hashAlg)
	if err != nil {
		return fmt.Errorf("cannot compute digest: %w", err)
	}

	policyAuth, err := SignPolicyAuthorization(rand, approvedPolicy, authKey, policyRef, signer, opts)
	if err != nil {
		return fmt.Errorf("cannot sign authorization: %w", err)
	}

	addedAuth := false
	for i, auth := range p.policy.PolicyAuthorizations {
		if bytes.Equal(auth.AuthKey.Name(), authName) && bytes.Equal(auth.PolicyRef, policyRef) {
			p.policy.PolicyAuthorizations[i] = *policyAuth
			addedAuth = true
			break
		}
	}
	if !addedAuth {
		p.policy.PolicyAuthorizations = append(p.policy.PolicyAuthorizations, *policyAuth)
	}

	return nil
}

type policyValidateRunner struct {
	policySession   *computePolicySession
	policyTickets   nullTickets
	policyResources mockPolicyResources

	currentPath policyBranchPath
}

func newPolicyValidateRunner(digest *taggedHash) *policyValidateRunner {
	return &policyValidateRunner{
		policySession: newComputePolicySession(digest),
	}
}

func (r *policyValidateRunner) session() policySession {
	return r.policySession
}

func (r *policyValidateRunner) tickets() policyTickets {
	return &r.policyTickets
}

func (r *policyValidateRunner) resources() policyResources {
	return &r.policyResources
}

func (r *policyValidateRunner) loadExternal(public *tpm2.Public) (ResourceContext, error) {
	// the handle is not relevant here
	resource := tpm2.NewLimitedResourceContext(0x80000000, public.Name())
	return newResourceContextFlushable(resource, nil), nil
}

func (r *policyValidateRunner) cpHash(cpHash *policyCpHashElement) error {
	if len(cpHash.Digest) != r.session().HashAlg().Size() {
		return errors.New("invalid digest size")
	}
	return nil
}

func (r *policyValidateRunner) nameHash(nameHash *policyNameHashElement) error {
	if len(nameHash.Digest) != r.session().HashAlg().Size() {
		return errors.New("invalid digest size")
	}
	return nil
}

func (r *policyValidateRunner) authorize(auth tpm2.ResourceContext, policy *Policy, usage *PolicySessionUsage, prefer tpm2.SessionType) (session tpm2.SessionContext, flushSession func(), err error) {
	return nil, func() {}, nil
}

func (r *policyValidateRunner) runBranch(branches policyBranches) (selected int, err error) {
	currentDigest, err := r.session().PolicyGetDigest()
	if err != nil {
		return 0, err
	}

	for i, branch := range branches {
		computedDigest := taggedHash{
			HashAlg: r.session().HashAlg(),
			Digest:  currentDigest,
		}

		name := policyBranchPath(branch.Name)
		if len(name) == 0 {
			name = policyBranchPath(fmt.Sprintf("$[%d]", i))
		}

		err := func() error {
			origPolicySession := r.policySession
			origPath := r.currentPath
			r.policySession = newComputePolicySession(&computedDigest)
			r.currentPath = r.currentPath.Concat(name)
			defer func() {
				r.policySession = origPolicySession
				r.currentPath = origPath
			}()

			return r.run(branch.Policy)
		}()
		if err != nil {
			return 0, err
		}

		found := false
		for _, digest := range branch.PolicyDigests {
			if digest.HashAlg != r.session().HashAlg() {
				continue
			}

			if !bytes.Equal(digest.Digest(), computedDigest.Digest) {
				return 0, fmt.Errorf("stored and computed branch digest mismatch for branch %d (computed: %x, stored: %x)", i, computedDigest.Digest, digest.Digest())
			}
			found = true
			break
		}
		if !found {
			return 0, ErrMissingDigest
		}
	}

	r.currentPath = r.currentPath.Concat("**")
	return 0, nil
}

func (r *policyValidateRunner) runAuthorizedPolicy(keySign *tpm2.Public, policyRef tpm2.Nonce, policies []*Policy) (approvedPolicy tpm2.Digest, checkTicket *tpm2.TkVerified, err error) {
	return nil, nil, nil
}

func (r *policyValidateRunner) run(elements policyElements) error {
	for len(elements) > 0 {
		element := elements[0].runner()
		elements = elements[1:]
		if err := element.run(r); err != nil {
			return makePolicyError(err, r.currentPath, element.name())
		}
	}

	return nil
}

// Validate performs some checking of every element in the policy, and
// verifies that every branch is consistent with their stored digests. On
// success, it returns the digest correpsonding to this policy for the
// specified digest algorithm.
func (p *Policy) Validate(alg tpm2.HashAlgorithmId) (tpm2.Digest, error) {
	expectedDigest, err := p.Digest(alg)
	if err != nil {
		return nil, err
	}

	digest := &taggedHash{HashAlg: alg, Digest: make(tpm2.Digest, alg.Size())}

	runner := newPolicyValidateRunner(digest)
	if err := runner.run(p.policy.Policy); err != nil {
		return nil, err
	}

	if !bytes.Equal(digest.Digest, expectedDigest) {
		return nil, fmt.Errorf("stored and computed policy digest mismatch (computed: %x, stored: %x)", digest.Digest, expectedDigest)
	}

	for _, auth := range p.policy.PolicyAuthorizations {
		if auth.AuthKey.Name().Algorithm() != alg {
			continue
		}

		ok, err := auth.Verify(digest.Digest)
		if err != nil {
			return nil, &PolicyAuthorizationError{AuthName: auth.AuthKey.Name(), PolicyRef: auth.PolicyRef, err: fmt.Errorf("cannot verify signature: %w", err)}
		}
		if !ok {
			return nil, &PolicyAuthorizationError{AuthName: auth.AuthKey.Name(), PolicyRef: auth.PolicyRef, err: errors.New("invalid signature")}
		}
	}

	return expectedDigest, nil
}

// Branches returns the path of every branch in this policy. A TPM2_PolicyAuthorize assertion
// is represented by a "â€¦" component in a path.
func (p *Policy) Branches() ([]string, error) {
	var result []string

	var makeBeginBranchFn func(policyBranchPath) treeWalkerBeginBranchFn
	makeBeginBranchFn = func(parentPath policyBranchPath) treeWalkerBeginBranchFn {
		return func(name policyBranchPath) (policySession, treeWalkerBeginBranchNodeFn, treeWalkerCompleteFullPathFn, error) {
			branchPath := parentPath.Concat(name)

			session := newNullPolicySession(tpm2.HashAlgorithmSHA256)

			beginBranchNodeFn := func() (treeWalkerBeginBranchFn, error) {
				return makeBeginBranchFn(branchPath), nil
			}

			completeFullPathFn := func() error {
				result = append(result, string(branchPath))
				return nil
			}

			return session, beginBranchNodeFn, completeFullPathFn, nil
		}
	}

	walker := newTreeWalker(new(mockPolicyResources), makeBeginBranchFn(""))
	if err := walker.run(p.policy.Policy); err != nil {
		return nil, err
	}

	return result, nil
}

// PolicyNVDetails contains the properties of a TPM2_PolicyNV assertion.
type PolicyNVDetails struct {
	Auth      tpm2.Handle
	Index     tpm2.Handle
	Name      tpm2.Name
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

// PolicyAuthorizationDetails contains the properties of a TPM2_PolicySecret,
// TPM2_PolicySigned or TPM2_PolicyAuthorize assertion.
type PolicyAuthorizationDetails struct {
	AuthName  tpm2.Name
	PolicyRef tpm2.Nonce
}

// PolicyCounterTimerDetails contains the properties of a TPM2_PolicyCounterTimer
// assertion.
type PolicyCounterTimerDetails struct {
	OperandB  tpm2.Operand
	Offset    uint16
	Operation tpm2.ArithmeticOp
}

// PolicyPCRDetails contains the properties of a TPM2_PolicyPCR assertion.
type PolicyPCRDetails struct {
	PCRDigest tpm2.Digest
	PCRs      tpm2.PCRSelectionList
}

// PolicyBranchDetails contains the properties of a single policy branch.
type PolicyBranchDetails struct {
	NV                []PolicyNVDetails            // TPM2_PolicyNV assertions
	Secret            []PolicyAuthorizationDetails // TPM2_PolicySecret assertions
	Signed            []PolicyAuthorizationDetails // TPM2_PolicySigned assertions
	Authorize         []PolicyAuthorizationDetails // TPM2_PolicyAuthorize assertions
	AuthValueNeeded   bool                         // The branch contains a TPM2_PolicyAuthValue or TPM2_PolicyPassword assertion
	policyCommandCode tpm2.CommandCodeList
	CounterTimer      []PolicyCounterTimerDetails // TPM2_PolicyCounterTimer assertions
	policyCpHash      tpm2.DigestList
	policyNameHash    tpm2.DigestList
	PCR               []PolicyPCRDetails // TPM2_PolicyPCR assertions
	policyNvWritten   []bool
}

// IsValid indicates whether the corresponding policy branch is valid.
func (r *PolicyBranchDetails) IsValid() bool {
	if len(r.policyCommandCode) > 1 {
		for _, code := range r.policyCommandCode[1:] {
			if code != r.policyCommandCode[0] {
				return false
			}
		}
	}

	cpHashNum := 0
	if len(r.policyCpHash) > 0 {
		if len(r.policyCpHash) > 1 {
			for _, cpHash := range r.policyCpHash[1:] {
				if !bytes.Equal(cpHash, r.policyCpHash[0]) {
					return false
				}
			}
		}
		cpHashNum += 1
	}
	if len(r.policyNameHash) > 0 {
		if len(r.policyNameHash) > 1 {
			return false
		}
		cpHashNum += 1
	}
	if cpHashNum > 1 {
		return false
	}
	if len(r.policyNvWritten) > 1 {
		for _, nvWritten := range r.policyNvWritten[1:] {
			if nvWritten != r.policyNvWritten[0] {
				return false
			}
		}
	}

	return true
}

// The command code associated with a branch if set, either set by the TPM2_PolicyCommandCode
// or TPM2_PolicyDuplicationSelect assertion.
func (r *PolicyBranchDetails) CommandCode() (code tpm2.CommandCode, set bool) {
	if len(r.policyCommandCode) == 0 {
		return 0, false
	}
	return r.policyCommandCode[0], true
}

// The cpHash associated with a branch if set, either set by the TPM2_PolicyCpHash,
// TPM2_PolicySecret, or TPM2_PolicySigned assertions.
func (r *PolicyBranchDetails) CpHash() (cpHashA tpm2.Digest, set bool) {
	if len(r.policyCpHash) == 0 {
		return nil, false
	}
	return r.policyCpHash[0], true
}

// The nameHash associated with a branch if set, either set by the TPM2_PolicyNameHash
// or TPM2_PolicyDuplicationSelect assertion.
func (r *PolicyBranchDetails) NameHash() (nameHash tpm2.Digest, set bool) {
	if len(r.policyNameHash) == 0 {
		return nil, false
	}
	return r.policyNameHash[0], true
}

// The nvWrittenSet value associated with a branch if set.
func (r *PolicyBranchDetails) NvWritten() (nvWrittenSet bool, set bool) {
	if len(r.policyNvWritten) == 0 {
		return false, false
	}
	return r.policyNvWritten[0], true
}

// Details returns details of all branches with the supplied path prefix, for
// the specified algorithm.
func (p *Policy) Details(alg tpm2.HashAlgorithmId, path string) (map[string]PolicyBranchDetails, error) {
	result := make(map[string]PolicyBranchDetails)

	var makeBeginBranchFn func(policyBranchPath, policyBranchPath, policyBranchPath, bool, *PolicyBranchDetails) treeWalkerBeginBranchFn
	makeBeginBranchFn = func(parentPath, remaining, next policyBranchPath, consumeGreedy bool, details *PolicyBranchDetails) treeWalkerBeginBranchFn {
		nodeDetails := *details
		explicitlyHandledNode := false

		return func(name policyBranchPath) (policySession, treeWalkerBeginBranchNodeFn, treeWalkerCompleteFullPathFn, error) {
			if explicitlyHandledNode {
				return nil, nil, nil, errTreeWalkerSkipBranch
			}
			switch {
			case len(next) == 0 || next[0] == '*':
				// ok
			case next == name:
				// ok
				explicitlyHandledNode = true
			default:
				return nil, nil, nil, errTreeWalkerSkipBranch
			}

			branchPath := parentPath.Concat(name)
			branchDetails := nodeDetails

			session := newBranchDetailsCollector(alg, &branchDetails)

			beginBranchNodeFn := func() (treeWalkerBeginBranchFn, error) {
				remaining := remaining
				consumeGreedy := consumeGreedy

				var next policyBranchPath
				if consumeGreedy {
					next = "*"
				} else {
					next, remaining = remaining.PopNextComponent()
					if next == "**" {
						consumeGreedy = true
					}
				}
				return makeBeginBranchFn(branchPath, remaining, next, consumeGreedy, &branchDetails), nil
			}

			completeFullPath := func() error {
				result[string(branchPath)] = branchDetails
				return nil
			}

			return session, beginBranchNodeFn, completeFullPath, nil
		}
	}

	walker := newTreeWalker(
		new(mockPolicyResources),
		makeBeginBranchFn("", policyBranchPath(path), "*", false, new(PolicyBranchDetails)),
	)
	if err := walker.run(p.policy.Policy); err != nil {
		return nil, err
	}

	return result, nil
}
